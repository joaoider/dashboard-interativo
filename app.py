"""
üìä Dashboard Interativo de Analytics - Data Science
üöÄ Aplica√ß√£o principal desenvolvida com Streamlit
üë®‚Äçüíª Desenvolvido por: Jo√£o Silva
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import json
from datetime import datetime, timedelta
import time

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard Analytics",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Importar componentes personalizados
try:
    from components.charts import create_line_chart, create_bar_chart, create_pie_chart
    from components.filters import create_filters, apply_filters
    from components.utils import load_data, calculate_kpis
except ImportError:
    # Fallback se os componentes n√£o estiverem dispon√≠veis
    st.warning("‚ö†Ô∏è Componentes personalizados n√£o encontrados. Usando vers√£o b√°sica.")

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        color: #1f77b4;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .metric-value {
        font-size: 2rem;
        font-weight: bold;
        color: #1f77b4;
    }
    .metric-label {
        font-size: 1rem;
        color: #666;
    }
    .chart-container {
        background-color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
</style>
""", unsafe_allow_html=True)

def load_sample_data():
    """Carrega dados de exemplo para demonstra√ß√£o"""
    # Gerar dados sint√©ticos
    dates = pd.date_range(start='2023-01-01', end='2024-12-31', freq='D')
    np.random.seed(42)
    
    data = {
        'data': dates,
        'vendas': np.random.normal(1000, 200, len(dates)) + np.sin(np.arange(len(dates)) * 2 * np.pi / 365) * 200,
        'clientes': np.random.poisson(50, len(dates)),
        'receita': np.random.normal(5000, 1000, len(dates)),
        'custo': np.random.normal(3000, 800, len(dates)),
        'regiao': np.random.choice(['Norte', 'Sul', 'Leste', 'Oeste', 'Centro'], len(dates)),
        'categoria': np.random.choice(['Eletr√¥nicos', 'Vestu√°rio', 'Casa', 'Esporte', 'Livros'], len(dates))
    }
    
    df = pd.DataFrame(data)
    df['lucro'] = df['receita'] - df['custo']
    df['margem'] = (df['lucro'] / df['receita']) * 100
    df['mes'] = df['data'].dt.month
    df['ano'] = df['data'].dt.year
    df['trimestre'] = df['data'].dt.quarter
    
    return df

def calculate_metrics(df):
    """Calcula m√©tricas principais"""
    hoje = datetime.now()
    df_hoje = df[df['data'] <= hoje]
    
    metrics = {
        'total_vendas': df_hoje['vendas'].sum(),
        'total_receita': df_hoje['receita'].sum(),
        'total_lucro': df_hoje['lucro'].sum(),
        'media_margem': df_hoje['margem'].mean(),
        'total_clientes': df_hoje['clientes'].sum(),
        'vendas_hoje': df_hoje[df_hoje['data'].dt.date == hoje.date()]['vendas'].sum() if len(df_hoje[df_hoje['data'].dt.date == hoje.date()]) > 0 else 0
    }
    
    return metrics

def create_overview_page(df):
    """Cria a p√°gina de vis√£o geral"""
    st.markdown('<h1 class="main-header">üìä Dashboard Analytics</h1>', unsafe_allow_html=True)
    
    # M√©tricas principais
    metrics = calculate_metrics(df)
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value">R$ {metrics['total_receita']:,.0f}</div>
            <div class="metric-label">Receita Total</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value">R$ {metrics['total_lucro']:,.0f}</div>
            <div class="metric-label">Lucro Total</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value">{metrics['total_clientes']:,.0f}</div>
            <div class="metric-label">Total Clientes</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value">{metrics['media_margem']:.1f}%</div>
            <div class="metric-label">Margem M√©dia</div>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Gr√°ficos principais
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown('<h3>üìà Evolu√ß√£o das Vendas</h3>', unsafe_allow_html=True)
        fig = px.line(
            df.groupby('data')['vendas'].sum().reset_index(),
            x='data',
            y='vendas',
            title='Vendas Di√°rias ao Longo do Tempo'
        )
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.markdown('<h3>üí∞ Evolu√ß√£o da Receita</h3>', unsafe_allow_html=True)
        fig = px.line(
            df.groupby('data')['receita'].sum().reset_index(),
            x='data',
            y='receita',
            title='Receita Di√°ria ao Longo do Tempo'
        )
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
    
    # An√°lise por regi√£o
    st.markdown('<h3>üó∫Ô∏è Distribui√ß√£o por Regi√£o</h3>', unsafe_allow_html=True)
    col1, col2 = st.columns(2)
    
    with col1:
        fig = px.pie(
            df.groupby('regiao')['vendas'].sum().reset_index(),
            values='vendas',
            names='regiao',
            title='Vendas por Regi√£o'
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        fig = px.bar(
            df.groupby('regiao')['receita'].sum().reset_index(),
            x='regiao',
            y='receita',
            title='Receita por Regi√£o'
        )
        st.plotly_chart(fig, use_container_width=True)

def create_analytics_page(df):
    """Cria a p√°gina de analytics"""
    st.markdown('<h1>üìà Analytics Avan√ßado</h1>', unsafe_allow_html=True)
    
    # Filtros
    st.sidebar.markdown("## üéõÔ∏è Filtros")
    regioes = st.sidebar.multiselect("Regi√µes", df['regiao'].unique(), default=df['regiao'].unique())
    categorias = st.sidebar.multiselect("Categorias", df['categoria'].unique(), default=df['categoria'].unique())
    data_inicio = st.sidebar.date_input("Data In√≠cio", df['data'].min())
    data_fim = st.sidebar.date_input("Data Fim", df['data'].max())
    
    # Aplicar filtros
    df_filtrado = df[
        (df['regiao'].isin(regioes)) &
        (df['categoria'].isin(categorias)) &
        (df['data'].dt.date >= data_inicio) &
        (df['data'].dt.date <= data_fim)
    ]
    
    # Estat√≠sticas descritivas
    st.markdown('<h3>üìä Estat√≠sticas Descritivas</h3>', unsafe_allow_html=True)
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**Vendas**")
        st.write(f"**M√©dia:** {df_filtrado['vendas'].mean():.2f}")
        st.write(f"**Mediana:** {df_filtrado['vendas'].median():.2f}")
        st.write(f"**Desvio Padr√£o:** {df_filtrado['vendas'].std():.2f}")
    
    with col2:
        st.markdown("**Receita**")
        st.write(f"**M√©dia:** R$ {df_filtrado['receita'].mean():.2f}")
        st.write(f"**Mediana:** R$ {df_filtrado['receita'].median():.2f}")
        st.write(f"**Desvio Padr√£o:** R$ {df_filtrado['receita'].std():.2f}")
    
    with col3:
        st.markdown("**Margem**")
        st.write(f"**M√©dia:** {df_filtrado['margem'].mean():.2f}%")
        st.write(f"**Mediana:** {df_filtrado['margem'].median():.2f}%")
        st.write(f"**Desvio Padr√£o:** {df_filtrado['margem'].std():.2f}%")
    
    st.markdown("---")
    
    # An√°lise temporal
    st.markdown('<h3>‚è∞ An√°lise Temporal</h3>', unsafe_allow_html=True)
    
    # Vendas por m√™s
    vendas_mensais = df_filtrado.groupby(['ano', 'mes'])['vendas'].sum().reset_index()
    vendas_mensais['data_mes'] = pd.to_datetime(vendas_mensais[['ano', 'mes']].assign(day=1))
    
    fig = px.line(
        vendas_mensais,
        x='data_mes',
        y='vendas',
        title='Vendas Mensais',
        markers=True
    )
    fig.update_layout(height=400)
    st.plotly_chart(fig, use_container_width=True)
    
    # An√°lise sazonal
    col1, col2 = st.columns(2)
    
    with col1:
        vendas_por_mes = df_filtrado.groupby('mes')['vendas'].mean().reset_index()
        fig = px.bar(
            vendas_por_mes,
            x='mes',
            y='vendas',
            title='Vendas M√©dias por M√™s (Sazonalidade)'
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        vendas_por_trimestre = df_filtrado.groupby('trimestre')['vendas'].sum().reset_index()
        fig = px.pie(
            vendas_por_trimestre,
            values='vendas',
            names='trimestre',
            title='Vendas por Trimestre'
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # An√°lise de correla√ß√£o
    st.markdown('<h3>üîó An√°lise de Correla√ß√£o</h3>', unsafe_allow_html=True)
    
    # Selecionar vari√°veis num√©ricas
    variaveis_numericas = ['vendas', 'receita', 'custo', 'lucro', 'margem']
    correlacao = df_filtrado[variaveis_numericas].corr()
    
    fig = px.imshow(
        correlacao,
        text_auto=True,
        aspect="auto",
        title="Matriz de Correla√ß√£o"
    )
    st.plotly_chart(fig, use_container_width=True)
    
    # An√°lise por categoria
    st.markdown('<h3>üè∑Ô∏è An√°lise por Categoria</h3>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        vendas_categoria = df_filtrado.groupby('categoria')['vendas'].sum().reset_index()
        fig = px.bar(
            vendas_categoria,
            x='categoria',
            y='vendas',
            title='Vendas por Categoria'
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        margem_categoria = df_filtrado.groupby('categoria')['margem'].mean().reset_index()
        fig = px.bar(
            margem_categoria,
            x='categoria',
            y='margem',
            title='Margem M√©dia por Categoria'
        )
        st.plotly_chart(fig, use_container_width=True)

def create_kpis_page(df):
    """Cria a p√°gina de KPIs"""
    st.markdown('<h1>üéØ Dashboard de KPIs</h1>', unsafe_allow_html=True)
    
    # KPIs em tempo real
    st.markdown('<h3>üìä KPIs em Tempo Real</h3>', unsafe_allow_html=True)
    
    metrics = calculate_metrics(df)
    
    # M√©tricas principais
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            label="Receita Total",
            value=f"R$ {metrics['total_receita']:,.0f}",
            delta=f"R$ {metrics['vendas_hoje']:,.0f} (hoje)"
        )
    
    with col2:
        st.metric(
            label="Lucro Total",
            value=f"R$ {metrics['total_lucro']:,.0f}",
            delta=f"{metrics['media_margem']:.1f}% (margem)"
        )
    
    with col3:
        st.metric(
            label="Total Clientes",
            value=f"{metrics['total_clientes']:,.0f}",
            delta=f"{metrics['total_clientes']/len(df):.0f} (m√©dia/dia)"
        )
    
    st.markdown("---")
    
    # Compara√ß√£o de per√≠odos
    st.markdown('<h3>üìÖ Compara√ß√£o de Per√≠odos</h3>', unsafe_allow_html=True)
    
    # Selecionar per√≠odo de compara√ß√£o
    col1, col2 = st.columns(2)
    
    with col1:
        periodo_atual = st.selectbox(
            "Per√≠odo Atual",
            ["√öltimo M√™s", "√öltimo Trimestre", "√öltimo Ano"],
            index=0
        )
    
    with col2:
        periodo_anterior = st.selectbox(
            "Per√≠odo Anterior",
            ["M√™s Anterior", "Trimestre Anterior", "Ano Anterior"],
            index=0
        )
    
    # Calcular m√©tricas para os per√≠odos
    hoje = datetime.now()
    
    if periodo_atual == "√öltimo M√™s":
        inicio_atual = hoje - timedelta(days=30)
        fim_atual = hoje
    elif periodo_atual == "√öltimo Trimestre":
        inicio_atual = hoje - timedelta(days=90)
        fim_atual = hoje
    else:  # √öltimo Ano
        inicio_atual = hoje - timedelta(days=365)
        fim_atual = hoje
    
    # Aplicar filtros de per√≠odo
    df_atual = df[(df['data'] >= inicio_atual) & (df['data'] <= fim_atual)]
    
    # Calcular m√©tricas
    vendas_atual = df_atual['vendas'].sum()
    receita_atual = df_atual['receita'].sum()
    lucro_atual = df_atual['lucro'].sum()
    
    # Exibir compara√ß√£o
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            label="Vendas (Per√≠odo Atual)",
            value=f"{vendas_atual:,.0f}",
            delta=f"R$ {receita_atual:,.0f} (receita)"
        )
    
    with col2:
        st.metric(
            label="Receita (Per√≠odo Atual)",
            value=f"R$ {receita_atual:,.0f}",
            delta=f"R$ {lucro_atual:,.0f} (lucro)"
        )
    
    with col3:
        margem_atual = (lucro_atual / receita_atual * 100) if receita_atual > 0 else 0
        st.metric(
            label="Margem (Per√≠odo Atual)",
            value=f"{margem_atual:.1f}%",
            delta=f"{len(df_atual)} dias"
        )
    
    st.markdown("---")
    
    # Gr√°fico de tend√™ncias dos KPIs
    st.markdown('<h3>üìà Tend√™ncias dos KPIs</h3>', unsafe_allow_html=True)
    
    # Agrupar dados por semana para suavizar
    df_semanal = df_atual.groupby(pd.Grouper(key='data', freq='W')).agg({
        'vendas': 'sum',
        'receita': 'sum',
        'lucro': 'sum'
    }).reset_index()
    
    fig = make_subplots(
        rows=3, cols=1,
        subplot_titles=('Vendas Semanais', 'Receita Semanal', 'Lucro Semanal'),
        vertical_spacing=0.1
    )
    
    fig.add_trace(
        go.Scatter(x=df_semanal['data'], y=df_semanal['vendas'], name='Vendas'),
        row=1, col=1
    )
    
    fig.add_trace(
        go.Scatter(x=df_semanal['data'], y=df_semanal['receita'], name='Receita'),
        row=2, col=1
    )
    
    fig.add_trace(
        go.Scatter(x=df_semanal['data'], y=df_semanal['lucro'], name='Lucro'),
        row=3, col=1
    )
    
    fig.update_layout(height=600, showlegend=False)
    st.plotly_chart(fig, use_container_width=True)

def create_settings_page():
    """Cria a p√°gina de configura√ß√µes"""
    st.markdown('<h1>‚öôÔ∏è Configura√ß√µes</h1>', unsafe_allow_html=True)
    
    # Configura√ß√µes do dashboard
    st.markdown('<h3>üé® Configura√ß√µes do Dashboard</h3>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        tema = st.selectbox("Tema", ["Claro", "Escuro", "Autom√°tico"])
        layout = st.selectbox("Layout", ["Wide", "Centered"])
        sidebar_state = st.selectbox("Estado da Sidebar", ["Expanded", "Collapsed"])
    
    with col2:
        atualizacao_auto = st.checkbox("Atualiza√ß√£o Autom√°tica", value=True)
        intervalo_atualizacao = st.slider("Intervalo de Atualiza√ß√£o (min)", 1, 60, 5)
        notificacoes = st.checkbox("Notifica√ß√µes", value=True)
    
    # Configura√ß√µes de dados
    st.markdown('<h3>üìä Configura√ß√µes de Dados</h3>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        fonte_dados = st.selectbox("Fonte de Dados", ["CSV", "Database", "API", "Excel"])
        cache_dados = st.checkbox("Cache de Dados", value=True)
        tempo_cache = st.slider("Tempo de Cache (min)", 1, 1440, 60)
    
    with col2:
        formato_data = st.selectbox("Formato de Data", ["DD/MM/YYYY", "MM/DD/YYYY", "YYYY-MM-DD"])
        fuso_horario = st.selectbox("Fuso Hor√°rio", ["UTC", "America/Sao_Paulo", "Europe/London"])
        idioma = st.selectbox("Idioma", ["Portugu√™s", "English", "Espa√±ol"])
    
    # Configura√ß√µes de usu√°rio
    st.markdown('<h3>üë§ Configura√ß√µes de Usu√°rio</h3>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        nome_usuario = st.text_input("Nome do Usu√°rio", value="Jo√£o Silva")
        email = st.text_input("Email", value="joao.silva@email.com")
        empresa = st.text_input("Empresa", value="Data Science Corp")
    
    with col2:
        cargo = st.text_input("Cargo", value="Data Scientist")
        departamento = st.selectbox("Departamento", ["TI", "Marketing", "Vendas", "Financeiro", "RH"])
        nivel_acesso = st.selectbox("N√≠vel de Acesso", ["Admin", "Manager", "Analyst", "Viewer"])
    
    # Bot√µes de a√ß√£o
    st.markdown("---")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üíæ Salvar Configura√ß√µes"):
            st.success("‚úÖ Configura√ß√µes salvas com sucesso!")
    
    with col2:
        if st.button("üîÑ Restaurar Padr√µes"):
            st.info("üîÑ Configura√ß√µes restauradas para os valores padr√£o")
    
    with col3:
        if st.button("üì§ Exportar Configura√ß√µes"):
            st.info("üì§ Configura√ß√µes exportadas para config.json")

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    
    # Sidebar
    st.sidebar.markdown("## üìä Dashboard Analytics")
    st.sidebar.markdown("### üë®‚Äçüíª Desenvolvido por Jo√£o Silva")
    
    # Menu de navega√ß√£o
    pagina = st.sidebar.selectbox(
        "Navega√ß√£o",
        ["üìä Overview", "üìà Analytics", "üéØ KPIs", "‚öôÔ∏è Settings"]
    )
    
    # Carregar dados
    df = load_sample_data()
    
    # Navega√ß√£o entre p√°ginas
    if pagina == "üìä Overview":
        create_overview_page(df)
    elif pagina == "üìà Analytics":
        create_analytics_page(df)
    elif pagina == "üéØ KPIs":
        create_kpis_page(df)
    elif pagina == "‚öôÔ∏è Settings":
        create_settings_page()
    
    # Footer
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center; color: #666;'>
            üìä Dashboard Analytics | üöÄ Desenvolvido com Streamlit | üë®‚Äçüíª Jo√£o Silva
        </div>
        """,
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()
